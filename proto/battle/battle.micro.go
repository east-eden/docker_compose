// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: battle/battle.proto

package battle

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BattleService service

type BattleService interface {
	GetBattleStatus(ctx context.Context, in *GetBattleStatusRequest, opts ...client.CallOption) (*GetBattleStatusReply, error)
}

type battleService struct {
	c    client.Client
	name string
}

func NewBattleService(name string, c client.Client) BattleService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "yokai_battle"
	}
	return &battleService{
		c:    c,
		name: name,
	}
}

func (c *battleService) GetBattleStatus(ctx context.Context, in *GetBattleStatusRequest, opts ...client.CallOption) (*GetBattleStatusReply, error) {
	req := c.c.NewRequest(c.name, "BattleService.GetBattleStatus", in)
	out := new(GetBattleStatusReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BattleService service

type BattleServiceHandler interface {
	GetBattleStatus(context.Context, *GetBattleStatusRequest, *GetBattleStatusReply) error
}

func RegisterBattleServiceHandler(s server.Server, hdlr BattleServiceHandler, opts ...server.HandlerOption) error {
	type battleService interface {
		GetBattleStatus(ctx context.Context, in *GetBattleStatusRequest, out *GetBattleStatusReply) error
	}
	type BattleService struct {
		battleService
	}
	h := &battleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BattleService{h}, opts...))
}

type battleServiceHandler struct {
	BattleServiceHandler
}

func (h *battleServiceHandler) GetBattleStatus(ctx context.Context, in *GetBattleStatusRequest, out *GetBattleStatusReply) error {
	return h.BattleServiceHandler.GetBattleStatus(ctx, in, out)
}
